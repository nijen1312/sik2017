<sprawozdanie przedmiot="SIK" temat="A">
    <imie_nazwisko>Marcin Jedyński</imie_nazwisko>
    <nr_indeksu>416084</nr_indeksu>
    <liczba_pkt>4</liczba_pkt>
    <z>1</z>
    <z>2</z>
    <z>7</z>
    <z>15</z>
</sprawozdanie>

Zadanie opis(1)

WYDRUKI:

02:07 mj@frytkebab:~/Documents/SIK2017/C_TEMAT/1_opis$> java c5p1b localhost 5670
Odpowiedź z: localhost
Serwer powiedzial (server said): Odebrano (Received).

02:03 mj@frytkebab:~/Documents/SIK2017/C_TEMAT/1_opis$> java c5p1a 5670
Czekam (I am waiting)...
Od: /127.0.0.1 (localhost)
SIK 420
Odsyłam uzyskane dane
KODY:
SERWER:

import java.io.*;
import java.net.*;

public class c5p1a {

	private DatagramSocket socket; // gniazdo UDP

	public c5p1a(int aport) throws IOException {
		// utworzenie i powiazanie z portem
		// creation and binding on port
		socket = new DatagramSocket(aport);
	}

	void dataExchange() {
		byte[] bufor = new byte[256];
		// "pusty" pakiet do odbioru danych
		// "empty" packet for receiving data
		DatagramPacket p = new DatagramPacket(bufor, 256);
		try {
			socket.receive(p); // czekaj na datagram (wait for datagram)

			// napisz kto jest nadawca (print who is sender)
			System.out.println(
					"Od: "+p.getAddress().toString()+
					" ("+p.getAddress().getHostName()+")");

			// utworz lancuch z tablicy bajtow (create string from array of bytes)
			String s = new String(p.getData());

			// wypisz wiadomosc (print message)
			System.out.println(s);

			// utworz datagram zwrotny (create reply datagram)
			// korzystajac z adresu nadawcy (using sender address)
			String response = "Odebrano (Received).";
			DatagramPacket p2 = new DatagramPacket(
					response.getBytes(), response.length(),
					p.getAddress(), p.getPort());

			socket.send(p2); // wyslij odpowiedz (send reply)
			System.out.println("Odsyłam uzyskane dane");
			socket.close(); // koniec protokolu (end of protocol)

			// jesli cos poszlo nie tak (if anything went wrong)
			// wypisz stan stosu wywolan (print stack trace)
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// args[0] - numer portu w wierszu polecen (port number in command line)
	public static void main(String[] args) {
		if (args.length < 1) {
			System.out.println(
					"Podaj numer portu jako parametr (provide port number in command line)"
					);
			return;
		}
		try {
			c5p1a server = new c5p1a(
					Integer.parseInt(args[0]));
			System.out.println("Czekam (I am waiting)...");
			server.dataExchange();

			// ew. wyjatek wyrzucany przez konstruktor
			// (exception throwed by the constructor)
			// c5p1a
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

KLIENT:

import java.io.*;
import java.net.*;

public class c5p1b {

    // args[0] - nazwa hosta (lub IP) (hostname)
    // args[1] - numer portu (port number)
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println(
                "Podaj nazwe hosta i numer portu"
            );
            return;
        }
        try {
            // utworzenie gniazda - lokalny port niewazny (socket creation on "any" port)
            DatagramSocket socket = new DatagramSocket();

            // ustalenie adresu na podstawie args[0] (address from args[0])
            InetAddress addr = InetAddress.getByName(args[0]);

            // utworzenie datagramu z wiadomoscia (creation of datagram with message)
            String s = "SIK 420";
            DatagramPacket p = new DatagramPacket(
                s.getBytes(), s.length(),
                addr, Integer.parseInt(args[1]));

            // wyslanie wiadomosci (message sending)
            socket.send(p);

            // utworzenie "pustego" datagramu (creation of empty datagram)
            byte[] bufor = new byte[256];
            DatagramPacket p2 = new DatagramPacket(bufor, 256);

            // czekaj na wiadomosc zwrotna (wait for reply message)
            socket.receive(p2);

            // utworz lancuch z tablicy bajtow (create string from array of bytes)
            String response = new String(p2.getData());

            // wyswietl wiadomosc zwrotna (print reply message)
            System.out.println("Odpowiedź z: "+p2.getAddress().getHostName());
            System.out.println("Serwer powiedzial (server said): "+response);

            // koniec protokolu (end of protocol)
            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

Zadanie 2 -------------------------------------
(tutaj treść zadania 2...)

Zadanie 7 -------------------------------------
(tutaj treść zadania 7...)

Zadanie 15 -------------------------------------
(tutaj treść zadania 15...)
