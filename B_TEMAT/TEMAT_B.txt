<sprawozdanie przedmiot="SIK" temat="A">
    <imie_nazwisko>Marcin Jedyński</imie_nazwisko>
    <nr_indeksu>416084</nr_indeksu>
    <liczba_pkt>11</liczba_pkt>
    <z>B.1</z>
    <z>B.2</z>
    <z>60</z>
    <z>61</z>
    <z>62</z>
    <z>63</z>
    <z>64</z>
    <z>67</z>
</sprawozdanie>

Zadanie B.1
OPIS: Połączenia nawiązane przez przeglądarkę firefox podczas przeglądania strony wp.pl.
WYDRUK:

s416084@pc15a:~/Documents/SIK2017$ netstat --inet -p  | grep firefox
tcp        0      0 pc15a.labs.wmi.am:35710 liveblog.wp.pl:https    ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:42816 wp.hit.gemius.pl:https  ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:49094 i.wpimg.pl:https        ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:39136 waw02s08-in-f194.:https ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:37588 dot.wp.pl:http          ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:34210 c.wp.pl:http            ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:52940 d.wpimg.pl:https        ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:57312 websocket.wp.pl:https   ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:46318 e.wp.pl:http            ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:58740 i.wp.pl:https           ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:55304 www.wp.pl:https         ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:53264 wp.tv:https             ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:55020 i.wp.pl:http            ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:55310 www.wp.pl:https         ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:45550 rev-64.go2.pl:https     ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:45544 rev-64.go2.pl:https     ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:36172 www.wp.pl:http          ESTABLISHED 6622/firefox    
tcp        0      0 pc15a.labs.wmi.am:58714 i.wp.pl:https           ESTABLISHED 6622/firefox    

OPIS: Połączenia nawiązane podczas sesji sftp.
WYDRUK:

s416084@pc15a:~/Documents/SIK2017$ sftp demo@test.rebex.net
The authenticity of host 'test.rebex.net (195.144.107.198)' can't be established.
ECDSA key fingerprint is SHA256:OzvpQxRUzSfV9F/ECMXbQ7B7zbK0aTngrhFCBUno65c.
No matching host key fingerprint found in DNS.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'test.rebex.net,195.144.107.198' (ECDSA) to the list of known hosts.
Password: 
Password: 
Connected to test.rebex.net.
sftp> ls
pub         readme.txt  

s416084@pc15a:~/Documents/SIK2017$ netstat --inet -p | grep ssh
tcp        0      0 pc15a.labs.wmi.am:51748 test.rebex.net:ssh      ESTABLISHED 17704/ssh       

OPIS: Połączenie nawiązane podczas sesji telnet
WYDRUK:

s416084@pc15a:~/Documents/SIK2017$ netstat --inet -p  | grep telnet
tcp        0      0 pc15a.labs.wmi.am:54116 towel.blinkenlig:telnet ESTABLISHED 19273/telnet    

Zadanie B.2
WYDRUK:

s416084@pc15a:~/My Documents/Pobrane$ ./a.out 
klient: pid==23921
serwer: pid==23922
serwer: bind()=0
serwer: czekam na klienta nr 1
klient: pierwsze polaczenie ...
klient: connect()=0
klient: write()=10
serwer: accept()=4
serwer: poczatek obslugi klienta nr 1
serwer: read()=10 buf=1234567890
serwer: write()=10
klient: read()=10 buf=1234567890
serwer: czekam na klienta nr 2
klient: drugie polaczenie ...
klient: connect()=0
serwer: accept()=4
serwer: poczatek obslugi klienta nr 2
klient: write()=10
serwer: read()=10 buf=QWERTYUIOP
serwer: write()=10
klient: read()=10 buf=QWERTYUIOP
klient: wait()=23922 0000

Zadanie 60

KOD PROGRAMU:


/* -------------------------------------------------------
   program "potok"
   -------------------------------------------------------

   wywolanie : potok prog1 prog2 prog3 ...

   program ten tworzy procesy potomne z podanymi programami
   i laczy je "w potok" (dziala jak "prog1|prog2|prog3")

   sposob uzycia :
     potok ls cat sort sort
     potok cat cat sort sort

   PYTANIA:
     -> co by sie stalo gdyby zostawic lacza otwarte ?
        (odpowiedz na to pytanie jest b. istotna !)
     -> jaki warunek musza spelniac argumenty
        programu "potok" (filtry) ?
*/

#include "unix.h"

int socketPairs [10][2];
int IloscProg;

void ZamknijLacza()
{
  for(int i=0;i<IloscProg-1;i++)
  { 
    close(socketPairs[i][0]);
    close(socketPairs[i][1]);

  }
}


//       potok prog1 prog2 prog3
// argv: 0     1     2     3
//
main(int argc, char **argv)
{
  int i,j;
  IloscProg=argc-1;
  for(i=0;i<IloscProg;i++){
	  socketpair(AF_UNIX,SOCK_STREAM,0,socketPairs[i]);
  }

  for(i=0;i<IloscProg;i++)
  {
     int pid;
     pid=fork();
     if(pid==0) // proces potomny
       {
         if(i==0) // pierwszy proces (przeadresowujemy tylko stdout)
         {
	   dup2(socketPairs[i][0],1);
           ZamknijLacza();
           execlp(argv[i+1],argv[i+1],NULL);
           fprintf(stderr,"Blad exec (pid==%i) !!!\n",getpid());
           exit(1);
         }
         if(i!=0 && i!=IloscProg-1) // przeadresowujemy stdin i stdout
         { 
	   
	   dup2(socketPairs[i][0],1);
           dup2(socketPairs[i-1][1],0);

           ZamknijLacza();
           execlp(argv[i+1],argv[i+1],NULL);
           fprintf(stderr,"Blad exec (pid==%i) !!!\n",getpid());
           exit(1);
         }
         if(i==IloscProg-1) // ostatni proces (przeadresowujemy tylko stdin)
         {
           dup2(socketPairs[i-1][1],0);
           ZamknijLacza();
           execlp(argv[i+1],argv[i+1],NULL);
           fprintf(stderr,"Blad exec (pid==%i) !!!\n",getpid());
           exit(1);
         }
       }
  }

  // proces macierzysty zamyka wszystkie lacza ...
  ZamknijLacza();

  // czekamy na wszystkie procesy potomne ...
  //
  for(i=0;i<IloscProg;i++)
  {
    int pid,status;
    pid=wait(&status);
    fprintf(stderr,"wait; pid=%i status=%04X\n",pid,status);
  }
}



Zadanie 61

KOD PROGRAMU:


/*
   Gniazdka, najprostszy przyklad ...
   ----------------------------------
*/

#include "unix.h"
#define SOC_NAME "/tmp/server_c"

void ObsSygnalu(int)
{ printf("pojawil sie sygnal SIGPIPE !!! (pid==%i)\n",getpid());
}
char *AdresCyfrowyKropkowy(char *name);

int main()
{
  signal(SIGPIPE,ObsSygnalu);
    // na wszelki wypadek ...

  int pid,status,i,j;
  pid=fork();
  if(pid==0) // pp: tutaj bedzie serwer ...
  {
    printf("serwer: pid==%i\n",getpid()); 
    int sock=socket (AF_UNIX,SOCK_STREAM,0);
    struct sockaddr_un adres;
    memset(&adres,0,sizeof(adres));
    adres.sun_family=AF_UNIX;
    strcpy(adres.sun_path, SOC_NAME);
    //adres.sun_addr.s_addr=inet_addr(AdresCyfrowyKropkowy("venus"));
    i=bind(sock,(struct sockaddr *)&adres,sizeof(adres));
    printf("serwer: bind()=%i\n",i);

    listen(sock,5);

    // czekamy na dokladnie 2 klientow !
    //
    for(int licznik=1;licznik<=2;licznik++)
    {
      printf("serwer: czekam na klienta nr %i\n",licznik);
      int nowy_sock=accept(sock,NULL,NULL);
      printf("serwer: accept()=%i\n",nowy_sock);
      printf("serwer: poczatek obslugi klienta nr %i\n",licznik);
      
      char buf[100];
      i=read(nowy_sock,buf,99);
      buf[i]=0;
      printf("serwer: read()=%i buf=%s\n",i,buf);

      j=write(nowy_sock,buf,i);
      printf("serwer: write()=%i\n",j);
        // jak widac serwer dziala jak 'echo'
        // odsyla to co przyszlo !
        
      close(nowy_sock);
    }

    close(sock);
    exit(0);
  }
  else // pm: tutaj bedzie klient ...
  {
    printf("klient: pid==%i\n",getpid()); 

    extern void klient(char *);

    sleep(1);
    printf("klient: pierwsze polaczenie ...\n");
    klient("1234567890");

    sleep(1);
    printf("klient: drugie polaczenie ...\n");
    klient("QWERTYUIOP");

    i=wait(&status);
    printf("klient: wait()=%i %04X\n",i,status);
  }
}

void klient(char *c)
{
  int i,j;
  int sock=socket (AF_UNIX,SOCK_STREAM,0);

  struct sockaddr_un adres;
  memset(&adres,0,sizeof(adres));
  adres.sun_family=AF_UNIX;
  strcpy(adres.sun_path,SOC_NAME);
  //adres.sun_addr.s_addr=inet_addr(AdresCyfrowyKropkowy("venus"));
  //adres.sun_addr.s_addr=inet_addr("1.2.3.4");
  i=connect(sock,(struct sockaddr *)&adres,sizeof(adres));
  printf("klient: connect()=%i\n",i);

  i=write(sock,c,strlen(c));
  printf("klient: write()=%i\n",i);

  char buf[100];
  i=read(sock,buf,99);
  buf[i]=0;
  printf("klient: read()=%i buf=%s\n",i,buf);
  
  close(sock);
}

char *AdresCyfrowyKropkowy(char *name)
{
  struct hostent *hostp;
  if ((hostp=(struct hostent *)gethostbyname(name))!=NULL)
  {
    return inet_ntoa(*(in_addr*)*hostp->h_addr_list);
       // jak dlugo ten wynik istnieje ??????
  }
}

Zadanie 62

KOD PROGRAMÓW:

SERWER:

#include "unix.h"
#define LISTENING_PORT 10000
#define MAX_HOST_QUEUE 5
int main ()
{
	int listSock = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in listAddr;
	memset(&listAddr,0,sizeof(listAddr));
	listAddr.sin_family=AF_INET;
	listAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	listAddr.sin_port=htons(LISTENING_PORT);
	bind(listSock,(struct sockaddr *)&listAddr,sizeof(listAddr));
	listen(listSock,MAX_HOST_QUEUE);
	while(1){
		int incSock = accept(listSock,NULL,NULL);
		int pid = fork();
		if(pid==0){
			dup2(incSock,0);
			dup2(incSock,1);
			close(incSock);
			execlp("./kropkaBin","./kropkaBin",NULL);
		}
		if(pid>0){
			close(incSock);
		}
	}
	return 0;
}

KLIENT:


#include "unix.h"
#define LISTENING_PORT 10000
#define BUFFER_SIZE 1024
int main ()
{

	int connSock = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in connAddr;
	memset(&connAddr,0,sizeof(connAddr));
	connAddr.sin_family=AF_INET;
	connAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	connAddr.sin_port=htons(LISTENING_PORT);
	connect(connSock,(struct sockaddr *)&connAddr,sizeof(connAddr));
	char buff[BUFFER_SIZE];
	int inpSize, messageSize;
	while((inpSize=read(0,buff,BUFFER_SIZE))!=0){
		write(connSock,buff,inpSize);
		messageSize=read(connSock,buff,BUFFER_SIZE);
		write(1,buff,messageSize);
	}
	close(connSock);
	return 0;
}

KROPKA:


#include<stdio.h>
#include<unistd.h>
#define BUFFER_SIZE 1024

int main()
{
    int i;
    char separationMark='.';
    char buff[BUFFER_SIZE];
    int count;
    while((count=read(0,buff,BUFFER_SIZE))!=0){
        for(i=0;i<count;i++){
            if(i<count-2){
                write(1,&buff[i],1);
                write(1,&separationMark,1);
            }else if(i<count){
                 write(1,&buff[i],1);
            }
        }
    }
return 0;
}

Zadanie 63


/*
   Gniazdka, najprostszy przyklad ...
   ----------------------------------
   */

#include "unix.h"
#define PORT 7000
#define BUFFER_SIZE 1024

void ObsSygnalu(int)
{ printf("pojawil sie sygnal SIGPIPE !!! (pid==%i)\n",getpid());
}
char *AdresCyfrowyKropkowy(char *name);

main()
{
	signal(SIGPIPE,ObsSygnalu);
	int pid,status,i,j;
	char buffer[BUFFER_SIZE];
	pid=fork();
	if(pid==0) // pp: tutaj bedzie serwer ...
	{
		printf("serwer: pid==%i\n",getpid()); 
		int sock=socket (AF_INET,SOCK_DGRAM,0);
		int recievedBytes,sentBytes;
		struct sockaddr_in serverAddress;
		memset(&serverAddress,0,sizeof(serverAddress));
		serverAddress.sin_family=AF_INET;
		serverAddress.sin_addr.s_addr=inet_addr("127.0.0.1");
		serverAddress.sin_port=htons(PORT);
		i=bind(sock,(struct sockaddr *)&serverAddress,sizeof(serverAddress));
		printf("serwer: bind()=%i\n",i);
		struct sockaddr_in incomingAddress;
		unsigned int incoming_len = sizeof(incomingAddress);
		for(int counter=1;counter<=2;counter++){
			recievedBytes=recvfrom(sock,buffer,BUFFER_SIZE,0,(struct sockaddr *)&incomingAddress,&incoming_len);
			printf("serwer: read()=%i buf=%s\n",recievedBytes,buffer);
			sentBytes=sendto(sock,buffer,recievedBytes,0,(struct sockaddr *)&incomingAddress,incoming_len);
			printf("serwer: write()=%i\n",sentBytes);
		}
		close(sock);
		exit(0);
	}
	else // pm: tutaj bedzie klient ...
	{
		printf("klient: pid==%i\n",getpid()); 
		extern void klient(char *);
		sleep(1);
		printf("klient: pierwsze polaczenie ...\n");
		klient("1234567890");
		sleep(1);
		printf("klient: drugie polaczenie ...\n");
		klient("QWERTYUIOP");
		i=wait(&status);
		printf("klient: wait()=%i %04X\n",i,status);
	}
}

void klient(char *c)
{
	int i,j;
	struct sockaddr_in clientAddress;
	int sock=socket (AF_INET,SOCK_DGRAM,0);
	memset(&clientAddress,0,sizeof(clientAddress));
	clientAddress.sin_family=AF_INET;
	clientAddress.sin_addr.s_addr=INADDR_ANY;
	clientAddress.sin_port=htons(0);
	i=bind(sock,(struct sockaddr *)&clientAddress,sizeof(clientAddress));
	struct sockaddr_in targetAddress;
	unsigned int target_len = sizeof(targetAddress);
	memset(&targetAddress,0,sizeof(targetAddress));
	targetAddress.sin_family=AF_INET;
	targetAddress.sin_addr.s_addr=inet_addr("127.0.0.1");
	targetAddress.sin_port=htons(PORT);
	i=sendto(sock,c,strlen(c),0,(struct sockaddr *)&targetAddress,target_len);
	printf("klient: write()=%i\n",i);
	char buf[100];
	i=recvfrom(sock,buf,99,0,(struct sockaddr *)&targetAddress,&target_len);
	buf[i]=0;
	printf("klient: read()=%i buf=%s\n",i,buf);
	close(sock);
}

char *AdresCyfrowyKropkowy(char *name)
{
	struct hostent *hostp;
	if ((hostp=(struct hostent *)gethostbyname(name))!=NULL)
	{
		return inet_ntoa(*(in_addr*)*hostp->h_addr_list);
		// jak dlugo ten wynik istnieje ??????
	}
}

Zadanie 64

KODY PROGRAMÓW:

SERWER:


#include "unix.h"
#define LISTENING_PORT 10000
#define BUFFER_SIZE 1024
int main ()
{
	char buffer[BUFFER_SIZE];
	char separationMark='.';
	char output[BUFFER_SIZE];
	int count;
	int recievedBytes, sentBytes,recieved_len,i;
	int listSock = socket(AF_INET,SOCK_DGRAM,0);
	struct sockaddr_in listAddr;
	struct sockaddr_in recievedAddr;
	recieved_len=sizeof(recievedAddr);
	memset(&recievedAddr,0,sizeof(recievedAddr));
	memset(&listAddr,0,sizeof(listAddr));
	listAddr.sin_family=AF_INET;
	listAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	listAddr.sin_port=htons(LISTENING_PORT);
	bind(listSock,(struct sockaddr *)&listAddr,sizeof(listAddr));
	while(1){
		recievedBytes=recvfrom(listSock,buffer,BUFFER_SIZE,0,(struct sockaddr *)&recievedAddr,&recieved_len);
		count=0;
		for(i=0;i<recievedBytes;i++){
			if(i<recievedBytes-2){
				output[count++]=buffer[i];
				output[count++]='.';
			}else if(i<recievedBytes){
				output[count++]=buffer[i];
			}
		}
		sentBytes=sendto(listSock,output,count,0,(struct sockaddr *)&recievedAddr,recieved_len);
	}
	return 0;
}

KLIENT:


#include "unix.h"
#define LISTENING_PORT 10000
#define BUFFER_SIZE 1024
int main ()
{

	int connSock = socket(AF_INET,SOCK_DGRAM,0);
	struct sockaddr_in connAddr;
	unsigned int conn_len=sizeof(connAddr);
	memset(&connAddr,0,sizeof(connAddr));
	connAddr.sin_family=AF_INET;
	connAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	connAddr.sin_port=htons(LISTENING_PORT);
	struct sockaddr_in clientAddr;
	memset(&clientAddr,0,sizeof(clientAddr));
	clientAddr.sin_family=AF_INET;
	clientAddr.sin_addr.s_addr=INADDR_ANY;
	clientAddr.sin_port=htons(0);
	bind(connSock,(struct sockaddr *)&clientAddr,sizeof(clientAddr));
	char buff[BUFFER_SIZE];
	int inpSize, sentBytes, messageSize;
	while((inpSize=read(0,buff,BUFFER_SIZE))!=0){
		sentBytes=sendto(connSock,buff,inpSize,0,(struct sockaddr *)&connAddr,conn_len);
		messageSize=recvfrom(connSock,buff,BUFFER_SIZE,0,(struct sockaddr *)&connAddr,&conn_len);
		write(1,buff,messageSize);
	}
	close(connSock);
	return 0;
}

Zadanie 67

KODY PROGRAMÓW:

SERWER:


#include "unix.h"
#define LISTENING_PORT 10000
#define MAX_HOST_QUEUE 5
int main ()
{
	int listSock = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in listAddr;
	memset(&listAddr,0,sizeof(listAddr));
	listAddr.sin_family=AF_INET;
	listAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	listAddr.sin_port=htons(LISTENING_PORT);
	bind(listSock,(struct sockaddr *)&listAddr,sizeof(listAddr));
	listen(listSock,MAX_HOST_QUEUE);
	while(1){
		int incSock = accept(listSock,NULL,NULL);
		printf("nowe połączenie, socket: %i\n",incSock);
		int pid = fork();
		if(pid==0){
			dup2(incSock,0);
			dup2(incSock,1);
			dup2(incSock,2);
			close(incSock);
			execlp("/bin/bash","/bin/bash",NULL);
		}
		if(pid>0){
			close(incSock);
		}
	}
	return 0;
}

KLIENT:


#include "unix.h"
#define LISTENING_PORT 10000
#define BUFFER_SIZE 1024
int main ()
{

	int connSock = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in connAddr;
	memset(&connAddr,0,sizeof(connAddr));
	connAddr.sin_family=AF_INET;
	connAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
	connAddr.sin_port=htons(LISTENING_PORT);
	int connStatus=connect(connSock,(struct sockaddr *)&connAddr,sizeof(connAddr));
	printf("status polaczenia: %d\n",connStatus);
	char buff[BUFFER_SIZE];
	int inpSize, messageSize;

	fd_set Read, Read0;
	FD_ZERO(&Read0);
	FD_SET(connSock, &Read0);
	FD_SET(0, &Read0);

	while(1) {
		Read=Read0;
		select(FD_SETSIZE, &Read, NULL, NULL, 0);
		if( FD_ISSET(0,&Read) ) { 
			inpSize=read(0,buff,BUFFER_SIZE);write(connSock,buff,inpSize);
		}
		if( FD_ISSET(connSock,&Read) ) { 
			messageSize=read(connSock,buff,BUFFER_SIZE);write(1,&buff,messageSize);
		}
	}
	close(connSock);
	return 0;
}

